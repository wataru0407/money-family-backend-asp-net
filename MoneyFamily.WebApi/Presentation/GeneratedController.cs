//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace MoneyFamily.WebApi.Controllers
{
    using Microsoft.AspNetCore.Authorization;
    using Microsoft.AspNetCore.Mvc;
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IAuthenticationController
    {

        /// <summary>
        /// ログイン
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LoginResponse>> LoginAsync(LoginRequest body);

        /// <summary>
        /// ユーザを登録
        /// </summary>


        /// <returns>Created</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<UserResponse>> CreateUserAsync(UserRequest body);

        /// <summary>
        /// パスワードをリセット
        /// </summary>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LoginResponse>> PasswordResetAsync(LoginRequest body);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class AuthenticationController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IAuthenticationController _implementation;

        public AuthenticationController(IAuthenticationController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// ログイン
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v1/auth/login")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LoginResponse>> Login([Microsoft.AspNetCore.Mvc.FromBody] LoginRequest body)
        {

            return _implementation.LoginAsync(body);
        }

        /// <summary>
        /// ユーザを登録
        /// </summary>
        /// <returns>Created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v1/auth/register")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<UserResponse>> CreateUser([Microsoft.AspNetCore.Mvc.FromBody] UserRequest body)
        {

            return _implementation.CreateUserAsync(body);
        }

        /// <summary>
        /// パスワードをリセット
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("v1/auth/reset")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<LoginResponse>> PasswordReset([Microsoft.AspNetCore.Mvc.FromBody] LoginRequest body)
        {

            return _implementation.PasswordResetAsync(body);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IUsersController
    {

        /// <summary>
        /// ユーザ情報を取得
        /// </summary>

        /// <param name="userId">ユーザID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<UserResponse>> GetUserByIdAsync(System.Guid userId);

        /// <summary>
        /// ユーザ情報を更新
        /// </summary>


        /// <param name="userId">ユーザID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<UserResponse>> UpdateUserByIdAsync(UserRequest body, System.Guid userId);

        /// <summary>
        /// ユーザを削除
        /// </summary>

        /// <param name="userId">ユーザID</param>

        /// <returns>No Content</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteUserByIdAsync(System.Guid userId);

        /// <summary>
        /// メールアドレスでユーザ情報を取得
        /// </summary>

        /// <param name="emailAddress">メールアドレス</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<UserResponse>> GetUserByEmailAddressAsync(string emailAddress);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    [ApiController]
    public partial class UsersController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IUsersController _implementation;

        public UsersController(IUsersController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// ユーザ情報を取得
        /// </summary>
        /// <param name="userId">ユーザID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/users/{userId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<UserResponse>> GetUserById(System.Guid userId)
        {

            return _implementation.GetUserByIdAsync(userId);
        }

        /// <summary>
        /// ユーザ情報を更新
        /// </summary>
        /// <param name="userId">ユーザID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPatch, Microsoft.AspNetCore.Mvc.Route("v1/users/{userId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<UserResponse>> UpdateUserById([Microsoft.AspNetCore.Mvc.FromBody] UserRequest body, System.Guid userId)
        {

            return _implementation.UpdateUserByIdAsync(body, userId);
        }

        /// <summary>
        /// ユーザを削除
        /// </summary>
        /// <param name="userId">ユーザID</param>
        /// <returns>No Content</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("v1/users/{userId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteUserById(System.Guid userId)
        {

            return _implementation.DeleteUserByIdAsync(userId);
        }

        /// <summary>
        /// メールアドレスでユーザ情報を取得
        /// </summary>
        /// <param name="emailAddress">メールアドレス</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/users")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<UserResponse>> GetUserByEmailAddress([Microsoft.AspNetCore.Mvc.FromQuery] string emailAddress)
        {

            return _implementation.GetUserByEmailAddressAsync(emailAddress);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IAccountsController
    {

        /// <summary>
        /// 家計簿一覧を取得
        /// </summary>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<AccountResponse>>> GetAccountsAsync();

        /// <summary>
        /// 家計簿を作成
        /// </summary>


        /// <returns>Created</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<AccountResponse>> CreateAccountAsync(AccountRequest body);

        /// <summary>
        /// 家計簿情報を取得
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<AccountResponse>> GetAccountByIdAsync(System.Guid accountId);

        /// <summary>
        /// 家計簿情報を更新
        /// </summary>


        /// <param name="accountId">家計簿ID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<AccountResponse>> UpdateAccountAsync(AccountRequest body, System.Guid accountId);

        /// <summary>
        /// 家計簿を削除
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <returns>No Content</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteAccountAsync(System.Guid accountId);

        /// <summary>
        /// 家計簿にユーザを追加
        /// </summary>


        /// <param name="accountId">家計簿ID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<AccountResponse>> AddAccountMemberAsync(AccountMemberRequest body, System.Guid accountId);

        /// <summary>
        /// 家計簿からユーザを削除
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="userId">ユーザID</param>

        /// <returns>No Content</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteAccountMemberAsync(System.Guid accountId, System.Guid userId);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class AccountsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IAccountsController _implementation;

        public AccountsController(IAccountsController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// 家計簿一覧を取得
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/accounts")]
        [Authorize(AuthenticationSchemes = Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerDefaults.AuthenticationScheme)]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<AccountResponse>>> GetAccounts()
        {

            return _implementation.GetAccountsAsync();
        }

        /// <summary>
        /// 家計簿を作成
        /// </summary>
        /// <returns>Created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v1/accounts")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<AccountResponse>> CreateAccount([Microsoft.AspNetCore.Mvc.FromBody] AccountRequest body)
        {

            return _implementation.CreateAccountAsync(body);
        }

        /// <summary>
        /// 家計簿情報を取得
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<AccountResponse>> GetAccountById(System.Guid accountId)
        {

            return _implementation.GetAccountByIdAsync(accountId);
        }

        /// <summary>
        /// 家計簿情報を更新
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<AccountResponse>> UpdateAccount([Microsoft.AspNetCore.Mvc.FromBody] AccountRequest body, System.Guid accountId)
        {

            return _implementation.UpdateAccountAsync(body, accountId);
        }

        /// <summary>
        /// 家計簿を削除
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <returns>No Content</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteAccount(System.Guid accountId)
        {

            return _implementation.DeleteAccountAsync(accountId);
        }

        /// <summary>
        /// 家計簿にユーザを追加
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/members")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<AccountResponse>> AddAccountMember([Microsoft.AspNetCore.Mvc.FromBody] AccountMemberRequest body, System.Guid accountId)
        {

            return _implementation.AddAccountMemberAsync(body, accountId);
        }

        /// <summary>
        /// 家計簿からユーザを削除
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="userId">ユーザID</param>
        /// <returns>No Content</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/members/{userId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteAccountMember(System.Guid accountId, System.Guid userId)
        {

            return _implementation.DeleteAccountMemberAsync(accountId, userId);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IVariableCostsController
    {

        /// <summary>
        /// 年/月/日を指定して変動費の一覧を取得
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="year">年(YYYY)</param>

        /// <param name="month">月(MM)</param>

        /// <param name="day">日(DD)</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<VariableCostResponse>>> GetVariableCostsAsync(System.Guid accountId, int year, int month, int? day = null);

        /// <summary>
        /// 変動費を作成
        /// </summary>

        /// <param name="accountId">家計簿ID</param>


        /// <returns>Created</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<VariableCostResponse>> CreateVariableCostAsync(System.Guid accountId, VariableCostRequest body);

        /// <summary>
        /// 変動費を取得
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<VariableCostResponse>> GetVariableCostByIdAsync(System.Guid accountId, System.Guid paymentId);

        /// <summary>
        /// 変動費を更新
        /// </summary>


        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<VariableCostResponse>> UpdateVariableCostByIdAsync(VariableCostRequest body, System.Guid accountId, System.Guid paymentId);

        /// <summary>
        /// 変動費を削除
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>No Content</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteVariableCostByIdAsync(System.Guid accountId, System.Guid paymentId);

        /// <summary>
        /// 月次の変動費の予算と実績を取得
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="year">年(YYYY)</param>

        /// <param name="month">月(MM)</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<BudgetResponse>>> GetMonthlyBudgetAndActualAsync(System.Guid accountId, int year, int month);

        /// <summary>
        /// 月次の変動費の予算を作成
        /// </summary>

        /// <param name="accountId">家計簿ID</param>


        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<BudgetResponse>> CreateMonthlyBudgetAsync(System.Guid accountId, BudgetRequest body);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class VariableCostsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IVariableCostsController _implementation;

        public VariableCostsController(IVariableCostsController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// 年/月/日を指定して変動費の一覧を取得
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="year">年(YYYY)</param>
        /// <param name="month">月(MM)</param>
        /// <param name="day">日(DD)</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/variables")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<VariableCostResponse>>> GetVariableCosts(System.Guid accountId, [Microsoft.AspNetCore.Mvc.FromQuery] int year, [Microsoft.AspNetCore.Mvc.FromQuery] int month, [Microsoft.AspNetCore.Mvc.FromQuery] int? day = null)
        {

            return _implementation.GetVariableCostsAsync(accountId, year, month, day);
        }

        /// <summary>
        /// 変動費を作成
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <returns>Created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/variables")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<VariableCostResponse>> CreateVariableCost(System.Guid accountId, [Microsoft.AspNetCore.Mvc.FromBody] VariableCostRequest body)
        {

            return _implementation.CreateVariableCostAsync(accountId, body);
        }

        /// <summary>
        /// 変動費を取得
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/variables/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<VariableCostResponse>> GetVariableCostById(System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.GetVariableCostByIdAsync(accountId, paymentId);
        }

        /// <summary>
        /// 変動費を更新
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/variables/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<VariableCostResponse>> UpdateVariableCostById([Microsoft.AspNetCore.Mvc.FromBody] VariableCostRequest body, System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.UpdateVariableCostByIdAsync(body, accountId, paymentId);
        }

        /// <summary>
        /// 変動費を削除
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>No Content</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/variables/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteVariableCostById(System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.DeleteVariableCostByIdAsync(accountId, paymentId);
        }

        /// <summary>
        /// 月次の変動費の予算と実績を取得
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="year">年(YYYY)</param>
        /// <param name="month">月(MM)</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/variables/budget")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<BudgetResponse>>> GetMonthlyBudgetAndActual(System.Guid accountId, [Microsoft.AspNetCore.Mvc.FromQuery] int year, [Microsoft.AspNetCore.Mvc.FromQuery] int month)
        {

            return _implementation.GetMonthlyBudgetAndActualAsync(accountId, year, month);
        }

        /// <summary>
        /// 月次の変動費の予算を作成
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/variables/budget")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<BudgetResponse>> CreateMonthlyBudget(System.Guid accountId, [Microsoft.AspNetCore.Mvc.FromBody] BudgetRequest body)
        {

            return _implementation.CreateMonthlyBudgetAsync(accountId, body);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IFixedCostsController
    {

        /// <summary>
        /// 年/月を指定して固定費の一覧を取得
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="year">年(YYYY)</param>

        /// <param name="month">月(MM)</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<FixedCostResponse>>> GetFixedCostAsync(System.Guid accountId, int year, int month);

        /// <summary>
        /// 固定費を作成
        /// </summary>

        /// <param name="accountId">家計簿ID</param>


        /// <returns>Created</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FixedCostResponse>> CreateFixedCostAsync(System.Guid accountId, FixedCostRequest body);

        /// <summary>
        /// 固定費を取得
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FixedCostResponse>> GetFixedCostByIdAsync(System.Guid accountId, System.Guid paymentId);

        /// <summary>
        /// 固定費を更新
        /// </summary>


        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FixedCostResponse>> UpdateFixedCostByIdAsync(FixedCostRequest body, System.Guid accountId, System.Guid paymentId);

        /// <summary>
        /// 固定費を削除
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>No Content</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteFixedCostByIdAsync(System.Guid accountId, System.Guid paymentId);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class FixedCostsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IFixedCostsController _implementation;

        public FixedCostsController(IFixedCostsController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// 年/月を指定して固定費の一覧を取得
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="year">年(YYYY)</param>
        /// <param name="month">月(MM)</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/fixes")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<FixedCostResponse>>> GetFixedCost(System.Guid accountId, [Microsoft.AspNetCore.Mvc.FromQuery] int year, [Microsoft.AspNetCore.Mvc.FromQuery] int month)
        {

            return _implementation.GetFixedCostAsync(accountId, year, month);
        }

        /// <summary>
        /// 固定費を作成
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <returns>Created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/fixes")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FixedCostResponse>> CreateFixedCost(System.Guid accountId, [Microsoft.AspNetCore.Mvc.FromBody] FixedCostRequest body)
        {

            return _implementation.CreateFixedCostAsync(accountId, body);
        }

        /// <summary>
        /// 固定費を取得
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/fixes/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FixedCostResponse>> GetFixedCostById(System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.GetFixedCostByIdAsync(accountId, paymentId);
        }

        /// <summary>
        /// 固定費を更新
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/fixes/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<FixedCostResponse>> UpdateFixedCostById([Microsoft.AspNetCore.Mvc.FromBody] FixedCostRequest body, System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.UpdateFixedCostByIdAsync(body, accountId, paymentId);
        }

        /// <summary>
        /// 固定費を削除
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>No Content</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/fixes/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteFixedCostById(System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.DeleteFixedCostByIdAsync(accountId, paymentId);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface ISpecialCostsController
    {

        /// <summary>
        /// 年/月を指定して特別支出の一覧を取得
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="year">年(YYYY)</param>

        /// <param name="month">月(MM)</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<SpecialCostResponse>>> GetSpecialCostsAsync(System.Guid accountId, int year, int month);

        /// <summary>
        /// 特別支出を作成
        /// </summary>

        /// <param name="accountId">家計簿ID</param>


        /// <returns>Created</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SpecialCostResponse>> CreateSpecialCostAsync(System.Guid accountId, SpecialCostRequest body);

        /// <summary>
        /// 特別支出を取得
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SpecialCostResponse>> GetSpecialCostByIdAsync(System.Guid accountId, System.Guid paymentId);

        /// <summary>
        /// 特別支出を更新
        /// </summary>


        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SpecialCostResponse>> UpdateSpecialCostByIdAsync(SpecialCostRequest body, System.Guid accountId, System.Guid paymentId);

        /// <summary>
        /// 特別支出を削除
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>No Content</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteSpecialCostByIdAsync(System.Guid accountId, System.Guid paymentId);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class SpecialCostsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private ISpecialCostsController _implementation;

        public SpecialCostsController(ISpecialCostsController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// 年/月を指定して特別支出の一覧を取得
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="year">年(YYYY)</param>
        /// <param name="month">月(MM)</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/specials")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<SpecialCostResponse>>> GetSpecialCosts(System.Guid accountId, [Microsoft.AspNetCore.Mvc.FromQuery] int year, [Microsoft.AspNetCore.Mvc.FromQuery] int month)
        {

            return _implementation.GetSpecialCostsAsync(accountId, year, month);
        }

        /// <summary>
        /// 特別支出を作成
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <returns>Created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/specials")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SpecialCostResponse>> CreateSpecialCost(System.Guid accountId, [Microsoft.AspNetCore.Mvc.FromBody] SpecialCostRequest body)
        {

            return _implementation.CreateSpecialCostAsync(accountId, body);
        }

        /// <summary>
        /// 特別支出を取得
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/specials/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SpecialCostResponse>> GetSpecialCostById(System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.GetSpecialCostByIdAsync(accountId, paymentId);
        }

        /// <summary>
        /// 特別支出を更新
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/specials/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SpecialCostResponse>> UpdateSpecialCostById([Microsoft.AspNetCore.Mvc.FromBody] SpecialCostRequest body, System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.UpdateSpecialCostByIdAsync(body, accountId, paymentId);
        }

        /// <summary>
        /// 特別支出を削除
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>No Content</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/specials/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteSpecialCostById(System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.DeleteSpecialCostByIdAsync(accountId, paymentId);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface ISavingsController
    {

        /// <summary>
        /// 年/月を指定して積立貯蓄の一覧を取得
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="year">年(YYYY)</param>

        /// <param name="month">月(MM)</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<SavingResponse>>> GetSavingsAsync(System.Guid accountId, int year, int month);

        /// <summary>
        /// 積立貯蓄を作成
        /// </summary>

        /// <param name="accountId">家計簿ID</param>


        /// <returns>Created</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SavingResponse>> CreateSavingAsync(System.Guid accountId, SavingRequest body);

        /// <summary>
        /// 積立貯蓄を取得
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SavingResponse>> GetSavingByIdAsync(System.Guid accountId, System.Guid paymentId);

        /// <summary>
        /// 積立貯蓄を更新
        /// </summary>


        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SavingResponse>> UpdateSavingByIdAsync(SavingRequest body, System.Guid accountId, System.Guid paymentId);

        /// <summary>
        /// 積立貯蓄を削除
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>No Content</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteSavingByIdAsync(System.Guid accountId, System.Guid paymentId);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class SavingsController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private ISavingsController _implementation;

        public SavingsController(ISavingsController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// 年/月を指定して積立貯蓄の一覧を取得
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="year">年(YYYY)</param>
        /// <param name="month">月(MM)</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/savings")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<SavingResponse>>> GetSavings(System.Guid accountId, [Microsoft.AspNetCore.Mvc.FromQuery] int year, [Microsoft.AspNetCore.Mvc.FromQuery] int month)
        {

            return _implementation.GetSavingsAsync(accountId, year, month);
        }

        /// <summary>
        /// 積立貯蓄を作成
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <returns>Created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/savings")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SavingResponse>> CreateSaving(System.Guid accountId, [Microsoft.AspNetCore.Mvc.FromBody] SavingRequest body)
        {

            return _implementation.CreateSavingAsync(accountId, body);
        }

        /// <summary>
        /// 積立貯蓄を取得
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/savings/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SavingResponse>> GetSavingById(System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.GetSavingByIdAsync(accountId, paymentId);
        }

        /// <summary>
        /// 積立貯蓄を更新
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/savings/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<SavingResponse>> UpdateSavingById([Microsoft.AspNetCore.Mvc.FromBody] SavingRequest body, System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.UpdateSavingByIdAsync(body, accountId, paymentId);
        }

        /// <summary>
        /// 積立貯蓄を削除
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>No Content</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/savings/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteSavingById(System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.DeleteSavingByIdAsync(accountId, paymentId);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IIncomesController
    {

        /// <summary>
        /// 年/月を指定して収入の一覧を取得
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="year">年(YYYY)</param>

        /// <param name="month">月(MM)</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<IncomeResponse>>> GetIncomesAsync(System.Guid accountId, int year, int month);

        /// <summary>
        /// 収入を作成
        /// </summary>

        /// <param name="accountId">家計簿ID</param>


        /// <returns>Created</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<IncomeResponse>> CreateIncomeAsync(System.Guid accountId, IncomeRequest body);

        /// <summary>
        /// 収入を取得
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<IncomeResponse>> GetIncomeByIdAsync(System.Guid accountId, System.Guid paymentId);

        /// <summary>
        /// 収入を更新
        /// </summary>


        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<IncomeResponse>> UpdateIncomeByIdAsync(IncomeRequest body, System.Guid accountId, System.Guid paymentId);

        /// <summary>
        /// 収入を削除
        /// </summary>

        /// <param name="accountId">家計簿ID</param>

        /// <param name="paymentId">明細ID</param>

        /// <returns>No Content</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteIncomeByIdAsync(System.Guid accountId, System.Guid paymentId);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class IncomesController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IIncomesController _implementation;

        public IncomesController(IIncomesController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// 年/月を指定して収入の一覧を取得
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="year">年(YYYY)</param>
        /// <param name="month">月(MM)</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/incomes")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<IncomeResponse>>> GetIncomes(System.Guid accountId, [Microsoft.AspNetCore.Mvc.FromQuery] int year, [Microsoft.AspNetCore.Mvc.FromQuery] int month)
        {

            return _implementation.GetIncomesAsync(accountId, year, month);
        }

        /// <summary>
        /// 収入を作成
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <returns>Created</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/incomes")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<IncomeResponse>> CreateIncome(System.Guid accountId, [Microsoft.AspNetCore.Mvc.FromBody] IncomeRequest body)
        {

            return _implementation.CreateIncomeAsync(accountId, body);
        }

        /// <summary>
        /// 収入を取得
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/incomes/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<IncomeResponse>> GetIncomeById(System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.GetIncomeByIdAsync(accountId, paymentId);
        }

        /// <summary>
        /// 収入を更新
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/incomes/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<IncomeResponse>> UpdateIncomeById([Microsoft.AspNetCore.Mvc.FromBody] IncomeRequest body, System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.UpdateIncomeByIdAsync(body, accountId, paymentId);
        }

        /// <summary>
        /// 収入を削除
        /// </summary>
        /// <param name="accountId">家計簿ID</param>
        /// <param name="paymentId">明細ID</param>
        /// <returns>No Content</returns>
        [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("v1/accounts/{accountId}/incomes/{paymentId}")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteIncomeById(System.Guid accountId, System.Guid paymentId)
        {

            return _implementation.DeleteIncomeByIdAsync(accountId, paymentId);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public interface IOperationController
    {

        /// <summary>
        /// カテゴリマスタを取得
        /// </summary>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<CategoryResponse>>> GetCategoriesAsync();

        /// <summary>
        /// 支出元マスタを取得
        /// </summary>

        /// <returns>OK</returns>

        System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<SourceResponse>>> GetCategoryAsync();

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]

    public partial class OperationController : Microsoft.AspNetCore.Mvc.ControllerBase
    {
        private IOperationController _implementation;

        public OperationController(IOperationController implementation)
        {
            _implementation = implementation;
        }

        /// <summary>
        /// カテゴリマスタを取得
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/categories")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<CategoryResponse>>> GetCategories()
        {

            return _implementation.GetCategoriesAsync();
        }

        /// <summary>
        /// 支出元マスタを取得
        /// </summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("v1/sources")]
        public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<SourceResponse>>> GetCategory()
        {

            return _implementation.GetCategoryAsync();
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoginRequest
    {
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoginResponse
    {
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Token { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRequest
    {
        [Newtonsoft.Json.JsonProperty("name", NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("email",NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("password",NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Password { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Email { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountRequest
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("createUserId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid CreateUserId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("members", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Guid>? Members { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountMemberRequest
    {
        [Newtonsoft.Json.JsonProperty("userId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid UserId { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableCostRequest
    {
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CategoryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryDatailId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CategoryDatailId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SourceId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sourceDetailId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SourceDetailId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("costdatail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ValiableCostDatail>? Costdatail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class VariableCostResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Date { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("dayOfWeek", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DayOfWeek { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("weekOfYear", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WeekOfYear { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CategoryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryDatailId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CategoryDatailId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Amount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SourceId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("sourceDetailId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? SourceDetailId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("costdatail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<ValiableCostDatail>? Costdatail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValiableCostDatail
    {
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Amount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetRequest
    {
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
        public int Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Always)]
        public int Month { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CategoryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("budgetAmount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BudgetAmount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BudgetResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CategoryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("budgetAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? BudgetAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("actualAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? ActualAmount { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("variance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Variance { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FixedCostRequest
    {
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
        public int Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Always)]
        public int Month { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CategoryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FixedCostResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
        public int Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Always)]
        public int Month { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CategoryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpecialCostRequest
    {
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
        public int Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Always)]
        public int Month { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CategoryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SpecialCostResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
        public int Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Always)]
        public int Month { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CategoryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavingRequest
    {
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
        public int Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Always)]
        public int Month { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CategoryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavingResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
        public int Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Always)]
        public int Month { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CategoryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IncomeRequest
    {
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
        public int Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Always)]
        public int Month { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CategoryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IncomeResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.Always)]
        public int Year { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("month", Required = Newtonsoft.Json.Required.Always)]
        public int Month { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Content { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? CategoryId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Amount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CategoryResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Details>? Details { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SourceResponse
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Id { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? Name { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Details
    {
        [Newtonsoft.Json.JsonProperty("detailId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DetailId { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("detailName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string? DetailName { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603